   1: /* Et minimalt Pascal-program */ 
   2: program Mini; 
Scanner: program token on line 2
Scanner: name token on line 2: mini
Scanner: ; token on line 2
   3: var res: integer; 
Scanner: var token on line 3
Scanner: name token on line 3: res
Scanner: : token on line 3
Scanner: name token on line 3: integer
Scanner: ; token on line 3
   4: const a = 0; 
Scanner: const token on line 4
Scanner: name token on line 4: a
Scanner: = token on line 4
Scanner: number token on line 4: 0
Scanner: ; token on line 4
   5:  
   6: function test (m: integer): integer; 
Scanner: function token on line 6
Scanner: name token on line 6: test
Scanner: ( token on line 6
Scanner: name token on line 6: m
Scanner: : token on line 6
Scanner: name token on line 6: integer
Scanner: ) token on line 6
Scanner: : token on line 6
Scanner: name token on line 6: integer
Scanner: ; token on line 6
   7: begin 
Scanner: begin token on line 7
   8:    if a = 0 then 
Scanner: if token on line 8
Scanner: name token on line 8: a
Scanner: = token on line 8
Scanner: number token on line 8: 0
Scanner: then token on line 8
   9:       res := test(1); 
Scanner: name token on line 9: res
Scanner: := token on line 9
Scanner: name token on line 9: test
Scanner: ( token on line 9
Scanner: number token on line 9: 1
Scanner: ) token on line 9
Scanner: ; token on line 9
  10:    else 
Scanner: else token on line 10
  11:       res := test(0); 
Scanner: name token on line 11: res
Scanner: := token on line 11
Scanner: name token on line 11: test
Scanner: ( token on line 11
Scanner: number token on line 11: 0
Scanner: ) token on line 11
Scanner: ; token on line 11
  12: end; 
Scanner: end token on line 12
Scanner: ; token on line 12
  13:  
  14: begin 
Scanner: begin token on line 14
  15:   res := test(5); 
Scanner: name token on line 15: res
Scanner: := token on line 15
Scanner: name token on line 15: test
Scanner: ( token on line 15
Scanner: number token on line 15: 5
Scanner: ) token on line 15
Scanner: ; token on line 15
  16:   write('G', 'C', 'D', '(', v1, ',', v2, ')', '=', res, eol); 
Scanner: name token on line 16: write
Scanner: ( token on line 16
Scanner: char token on line 16: 'G'
Scanner: , token on line 16
Scanner: char token on line 16: 'C'
Scanner: , token on line 16
Scanner: char token on line 16: 'D'
Scanner: , token on line 16
Scanner: char token on line 16: '('
Scanner: , token on line 16
Scanner: name token on line 16: v1
Scanner: , token on line 16
Scanner: char token on line 16: ','
Scanner: , token on line 16
Scanner: name token on line 16: v2
Scanner: , token on line 16
Scanner: char token on line 16: ')'
Scanner: , token on line 16
Scanner: char token on line 16: '='
Scanner: , token on line 16
Scanner: name token on line 16: res
Scanner: , token on line 16
Scanner: name token on line 16: eol
Scanner: ) token on line 16
Scanner: ; token on line 16
  17: end. 
Scanner: end token on line 17
Scanner: . token on line 17
Scanner: e-o-f token
